var system = require('system');
var page = require('webpage').create();
var xml = system.stdin.readLine();

/**
 * Removes LINE SEPARATOR character sequence that causes problems in PhantomJS
 *
 * http://stackoverflow.com/questions/10556875/list-of-unicode-characters-that-should-be-filtered-in-output
 * https://desk.draw.io/browse/DS-54
 * https://desk.draw.io/browse/DS-55
 */
xml = xml.replace(/\u2028/g, '');

var format = system.args[1];
var scale = system.args[2];
var quality = system.args[3];

page.onError = function(msg, trace) {

    var msgStack = ['ERROR: ' + msg];

    if (trace && trace.length) {
        msgStack.push('TRACE:');
        trace.forEach(function(t) {
            msgStack.push(' -> ' + t.file + ': ' + t.line + (t.function ? ' (in function "' + t.function +'")' : ''));
        });
    }

    system.stderr.write(msgStack.join('\n'));

};

page.open(@FILE@, function(status) {
    if (status !== 'success') {
        system.stderr.write('Backend could not be loaded\n');
        phantom.exit(1);
        return;
    }

    // Invoked after all content in the page is ready
    page.onCallback = function(bounds) {
        if (bounds == null) {
            system.stderr.write('No bounds returned\n');
            phantom.exit(1);
            return;
        }

        w = Math.ceil(bounds.x + bounds.width);
        h = Math.ceil(bounds.y + bounds.height);

        page.viewportSize = {width: w, height: h};

        if (format == 'pdf') {
            page.paperSize = {
                width: w + 'px',
                height: (h + 1) + 'px',
                margin: '0px'
            };
        }

        page.render("/dev/stdout", {format: format, quality: quality});
        phantom.exit(0);
    };

    // Invokes the render function in the page which invokes the above callback
    // when all content in the page has finished rendering (images, mathjax etc)
    page.evaluate(function(data) {
            render(data);
        },
        {xml: xml, format: format, scale: scale});
});
